# -*- coding: utf-8 -*-
"""Stock Prediction with sklearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jMY1vl-OParNrkIDTiio4X8G9YXo9Qor
"""

# Import libraries

import pandas as pd
import datetime
import numpy as np
from pandas import Series, DataFrame
import pandas_datareader.data as web

# Enter the Start date and End date

start = datetime.datetime(2018, 1, 1)
end = datetime.datetime(2019, 10, 5)

print("start date : ",start)
print("end date : ",end)

# Enter Stock Symbol for prediction 

stock_ticker = "TSLA"
df = web.DataReader(stock_ticker, 'yahoo', start, end)
print(df.head())
print(df.tail())

print(df.shape)

# Edit forecast_col, window_length and Run the code to create the data
forecast_col = 'Close'
df1 = df[forecast_col]
window_length = 10

start = 1
for lag in range(0,window_length+1):
  shift_col = pd.Series(df1.shift(lag))
  if(start == 1):
    data = pd.DataFrame(shift_col)
    data.columns = ['shift_'+str(lag)]
    start = 0
  else:
    shift_col = pd.DataFrame(shift_col)
    shift_col.columns = ['shift_'+str(lag)]    
    data = pd.concat([data,shift_col],axis=1)
print(data.shape)
data.dropna(inplace=True)
print(data.shape)
print(data.head())

from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor

from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

from sklearn.metrics import mean_squared_error

split_ratio = 0.7
split_index = int(len(data)*split_ratio)
print(split_index)

X = data.drop('shift_0',axis=1)
y = data['shift_0']

X_train = X[:split_index]
y_train = y[:split_index]

X_test = X[split_index:]
y_test = y[split_index:]

print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

from matplotlib import style

# Adjusting the size of matplotlib
import matplotlib as mpl
mpl.rc('figure', figsize=(16, 6))
mpl.__version__

# Adjusting the style of matplotlib
style.use('fivethirtyeight')

y_train.plot(label='Train')
y_test.plot(label='Test')
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Adj Close Price')
plt.title('Stock Prediction Adj Close')
plt.show()

def plot_test_forecast(y_test,forecast):
  #y_train.plot(label='Train')
  y_test.plot(label='Test')
  forecast.plot(label='Forecast')
  plt.legend(loc=4)
  plt.xlabel('Date')
  plt.ylabel('Adj Close Price')
  plt.title('Stock Prediction Adj Close')
  plt.show()

# Linear regression
clfreg = LinearRegression()
clfreg.fit(X_train, y_train)

confidencereg = clfreg.score(X_test, y_test)
y_pred_reg = clfreg.predict(X_test)

# results
print('The linear regression confidence is ', confidencereg)
mse = mean_squared_error(y_test, y_pred_reg)
print("Root Mean Squared Error: ", np.sqrt(mse))

forecast_reg = pd.Series(y_pred_reg)
forecast_reg.index = y_test.index

plot_test_forecast(y_test,forecast_reg)

# Quadratic Regression 2
clfpoly2 = make_pipeline(PolynomialFeatures(2), Ridge())
clfpoly2.fit(X_train, y_train)

confidencepoly2 = clfpoly2.score(X_test,y_test)
y_pred_poly2 = clfpoly2.predict(X_test)

# results
print('The quadratic regression 2 confidence is ', confidencepoly2)
mse = mean_squared_error(y_test, y_pred_poly2)
print("Root Mean Squared Error: ", np.sqrt(mse))

forecast_poly2 = pd.Series(y_pred_poly2)
forecast_poly2.index = y_test.index

plot_test_forecast(y_test,forecast_poly2)

# Quadratic Regression 3
clfpoly3 = make_pipeline(PolynomialFeatures(3), Ridge())
clfpoly3.fit(X_train, y_train)

confidencepoly3 = clfpoly3.score(X_test,y_test)
y_pred_poly3 = clfpoly3.predict(X_test)

# results
print('The quadratic regression 3 confidence is ', confidencepoly3)
mse = mean_squared_error(y_test, y_pred_poly3)
print("Root Mean Squared Error: ", np.sqrt(mse))

forecast_poly3 = pd.Series(y_pred_poly3)
forecast_poly3.index = y_test.index

plot_test_forecast(y_test,forecast_poly3)

# KNN Regression
clfknn = KNeighborsRegressor(n_neighbors=2)
clfknn.fit(X_train, y_train)

confidenceknn = clfknn.score(X_test, y_test)
y_pred_knn = clfknn.predict(X_test)

# results
print('The knn regression confidence is ', confidenceknn)
mse = mean_squared_error(y_test, y_pred_knn)
print("Root Mean Squared Error: ", np.sqrt(mse))

forecast_knn = pd.Series(y_pred_knn)
forecast_knn.index = y_test.index

plot_test_forecast(y_test,forecast_knn)

# KNN Regression
clfknn = KNeighborsRegressor(n_neighbors=5)
clfknn.fit(X_train, y_train)

confidenceknn = clfknn.score(X_test, y_test)
y_pred_knn = clfknn.predict(X_test)

# results
print('The knn regression confidence is ', confidenceknn)
mse = mean_squared_error(y_test, y_pred_knn)
print("Root Mean Squared Error: ", np.sqrt(mse))

forecast_knn = pd.Series(y_pred_knn)
forecast_knn.index = y_test.index

plot_test_forecast(y_test,forecast_knn)